///////////////////
// Grid Settings //
///////////////////

$grid-cols: 12 !default;  // [number] Number of columns in your grid
$grid-container-width: 85% !default;  // [css unit] Overall width of the page in the browser
$grid-max-width: 80em !default;  // [css unit] Maximum width of the page in the browser
$grid-breakpoint: 47em !default;  // [css unit] Only built-in breakpoint of the grid (everything flattens)
$grid-gutter: 1em !default;  // [css unit] Gutter between each column (negated on first and last columns)
$grid-container-class: container !default;  // [string] Base class of the container element
$grid-container-expand: false !default;  // [bool] Should containers expand to full-width on mobile
$grid-row-class: row !default;  // [string] Base class of each row
$grid-col-class: col !default;  // [string] Base class of each column
$grid-mobile-class: mobile !default;  // [string] Base class for mobile grid (is appended with -#)
$grid-mobile-cols: 4 !default;  // [number] Number of cols in mobile grid
$grid-set-border-box: false !default;  // [bool] Set box-sizing on column classes (assumes applied globally by default)

// internal - do not document
$grid-half-gutter: $grid-gutter / 2;
$grid-quarter-gutter: $grid-half-gutter / 2;


////////////////////
// Grid functions //
////////////////////

// Calculate the percentage width by column span.
// @param  {num} $colNumber The number of columns to span
// @param  {num} $totalColumns The number to divide into (default: $grid-cols)
// @return {num} CSS Percentage

@function gridCalc($colNumber, $totalColumns: $grid-cols) {
    @return percentage(($colNumber / $totalColumns));
}

// Internally used function (do not document)
// @param {num} Number to convert into the english word
// @return {string} The english word for $num
@function convertNumberToWord($num) {
    $words: one,two,three,four,five,six,seven,eight,nine,ten,eleven,
        twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
        twenty,twentyone,twentytwo,twentythree,twentyfour;

    @if $num > length($words) {
        @return "invalid";
    }

    @return nth($words, $num);
}


/////////////////
// Grid mixins //
/////////////////

@mixin clearfix {
    *zoom: 1;

    &:before, &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

// 
// Create a container out of any element.
// 
@mixin grid-container($media: true) {
    @if $grid-container-expand {
        overflow: hidden;
    }
    @else {
        padding: 0 $grid-gutter;
    }
    
    @if $media {
        @media only screen and (min-width: $grid-breakpoint) {
            margin: 0 auto;
            width: $grid-max-width;
            max-width: $grid-container-width;
            @if $grid-container-expand {
                overflow: visible;
            }
            @else {
                padding: 0;
            }
        }
    }
}

//
// Create a row out of any element.
// @param {bool} $half-gutter Cut the gutter on each column within in half (acts on all direct decendents)
// @param {bool} $collapse Remove the gutter on columns completely
// @param {bool} $has-mobile Whether or not the row contains mobile columns
//
@mixin grid-row($half-gutter: false, $collapse: false, $has-mobile: false, $media: true) {
    display: block;
    clear: both;
    width: auto;
    @if $has-mobile { margin: 0 -#{$grid-half-gutter}; }
    @include clearfix;

    @if $media {
        @media only screen and (min-width: $grid-breakpoint) {
            @if $collapse {
                margin: 0; 

                & > * {
                    padding: 0;
                };
            }
            @else if $half-gutter {
                margin: 0 -#{$grid-quarter-gutter};

                & > * {
                    padding: 0 ($grid-quarter-gutter);
                }
            }
            @else {
                margin: 0 -#{$grid-half-gutter};
            }
        }
    }
}

//
// Create a column out of any element.
// @param {num} $columns Number of columns the element should span (default is max)
// @param {num} $offset Number of columns the element should be offset by
// @param {num} $push Push the element by x number of columns
// @param {num} $pull Pull the element by x number of columns
// @param {bool} $centered Center the column in the row (there should only be one)
// @param {bool} $half-gutter Use only a half gutter on this specific column
// @param {num} $mobile-cols Number of columns to span on mobile, if any
//
@mixin grid-col($columns: $grid-cols, $offset: 0, $push: 0, $pull: 0, $centered: false, $half-gutter: false, $mobile-cols: 0) {
    display: block;
    position: relative;
    @if $mobile-cols > 0 {
        float: left;
        width: gridCalc($mobile-cols, $grid-mobile-cols);
        padding: 0 $grid-half-gutter;
    }
    @else {
        float: none;
        width: auto;
    }

    @if $columns < $grid-cols {  // assume this was included in a class
        @media only screen and (min-width: $grid-breakpoint) {
            // push/pull
            @if $push > 0 { left: gridCalc($push); }
            @else if $pull > 0 { right: gridCalc($pull); }
            // centered
            @if $centered { margin: 0 auto; }
            @else { float: left; }
            // half gutter
            @if $half-gutter { padding: 0 $grid-quarter-gutter; }
            @else { padding: 0 $grid-half-gutter; }
            // offset
            @if $offset > 0 { margin-left: gridCalc($offset); }
            width: gridCalc($columns);
        }
    }

    // ensure box-sizing
    @if $grid-set-border-box {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
        -ms-box-sizing: border-box;
            box-sizing: border-box;
    }
}

//
// Create column widths, offset, push, and pull classes within a given context.
// @param {num} $num-cols The number of columns to build classes to
// @param {string} $prepend A name to prepend to each grid class (a '-' separates this from the class name)
//
@mixin grid-classes($num-cols: $grid-cols, $prepend: false) {
    @if $prepend { $prepend: $prepend + "-"; }
    @else { $prepend: ""; }

    // col widths
    @for $i from 1 through $num-cols {
        .#{$prepend}#{convertNumberToWord($i)} {
            width: gridCalc($i, $num-cols);
            @content;
        }
    }

    // offsets, pushes, pulls
    @for $i from 1 through $num-cols - 1 {
        $perc: gridCalc($i, $num-cols);
        .#{$prepend}offset-#{$i} {
            margin-left: $perc;
        }
        .#{$prepend}push-#{$i} {
            left: $perc;
        }
        .#{$prepend}pull-#{$i} {
            right: $perc;
        }
    }
}


/////////////////
// Grid Styles //
/////////////////

.#{$grid-container-class} {
    @include grid-container(false);
}

.#{$grid-row-class} {
    @include grid-row($media: false);

    &.has-mobile {
        margin: 0 -#{$grid-half-gutter};
    }
}

.#{$grid-col-class}, .#{$grid-col-class}s {
    @include grid-col;
}

// mobile classes
.#{$grid-mobile-class}-#{$grid-row-class} {
    margin: 0 -#{$grid-half-gutter};
    @include clearfix;
}

@include grid-classes($grid-mobile-cols, $grid-mobile-class) {
    float: left;
    padding: 0 $grid-half-gutter;
}

.#{$grid-mobile-class}-hide {
    display: none !important;
}

// desktop breakpoint
@media only screen and (min-width: $grid-breakpoint) {
    // mobile classes
    .#{$grid-mobile-class}-show {
        display: none !important;
    }

    .#{$grid-mobile-class}-hide {
        display: inherit !important;
    }

    .#{$grid-mobile-class}-#{$grid-row-class} {
        margin: auto;
        &:before, &:after {
            display: none;
            clear: none;
        }
    }

    .#{$grid-container-class} {
        margin: 0 auto;
        width: $grid-max-width;
        max-width: $grid-container-width;
        @if $grid-container-expand {
            overflow: visible;
        }
        @else {
            padding: 0;
        }
    }

    .#{$grid-row-class} {
        margin: 0 -#{$grid-half-gutter};
        
        &.half-gutter {
            margin: 0 -#{$grid-quarter-gutter};

            .#{$grid-col-class}, .#{$grid-col-class}s {
                padding: 0 $grid-quarter-gutter;
            }
        }

        &.collapsed {
            margin: 0;

            .#{$grid-col-class}, .#{$grid-col-class}s {
                padding: 0;
            }
        }
    }

    .#{$grid-col-class}, .#{$grid-col-class}s {
        float: left;
        padding: 0 $grid-half-gutter;

        &.centered {
            float: none;
            margin: 0 auto;
        }
    }

    @include grid-classes;
}