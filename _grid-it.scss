///////////////////
// Grid Settings //
///////////////////

$grid-cols: 12 !default;  // [number] Number of columns in your grid
$grid-container-gutter: 85% !default;  // [css unit] Overall width of the page in the browser
$grid-max-width: 80em !default;  // [css unit] Maximum width of the page in the browser
$grid-breakpoint: 47em !default;  // [css unit] Only built-in breakpoint of the grid (everything flattens)
$grid-gutter: 2em !default;  // [css unit] Gutter between each column (negated on first and last columns)
$grid-container-class: container !default;  // [string] Base class of the container element
$grid-row-class: row !default;  // [string] Base class of each row
$grid-col-class: col !default;  // [string] Base class of each column
$grid-mobile-class: mobile !default;  // [string] Base class for mobile grid (is appended with -#)
$grid-mobile-cols: 4 !default;  // [number] Number of cols in mobile grid
$grid-set-border-box: false !default;  // [bool] Set box-sizing on column classes (assumes applied globally by default)

// do not edit
$grid-half-gutter: $grid-gutter / 2;
$grid-quarter-gutter: $grid-half-gutter / 2;

////////////////////
// Grid functions //
////////////////////

//**
//* Calculate the percentage width by column span.
//* @param  {num} $colNumber The number of columns to span
//* @param  {num} $totalColumns The number to divide into (default: $grid-cols)
//* @return {num} CSS Percentage
//*/
@function gridCalc($colNumber, $totalColumns: $grid-cols) {
    @return percentage(($colNumber / $totalColumns));
}

@function convertNumberToWord($num) {
    $words: one,two,three,four,five,six,seven,eight,nine,ten,eleven,
        twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,
        twenty,twentyone,twentytwo,twentythree,twentyfour;

    @if $num > length($words) {
        @return "invalid";
    }

    @return nth($words, $num);
}

/////////////////
// Grid mixins //
/////////////////

@mixin clearfix {
    *zoom: 1;

    &:before, &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

//**
//* Create a container out of any element.
//*/
@mixin grid-container {
    margin: 0 auto;
    width: $grid-container-gutter;
    max-width: $grid-max-width;
}

//**
//* Create a column out of any element.
//* @param {num} $grid-cols Number of columns the element should span (default is max)
//* @param {num} $offset Number of columns the element should be offset by
//* @param {num} $push Push the element by x number of columns
//* @param {num} $pull Pull the element by x number of columns
//* @param {bool} $centered Center the column in the row (there should only be one)
//* @param {bool} $half-gutter Use only a half gutter on this specific column
//*/
@mixin grid-row($half-gutter: false, $collapse: false) {
    display: block;
    clear: both;
    @if $collapse { margin: 0; &>*{ padding: 0; }; }
    @else { margin: 0 -#{$grid-half-gutter}; }
    width: auto;
    overflow: hidden;
    @include clearfix;

    @if $half-gutter {
        &>* {
            padding: 0 ($grid-quarter-gutter);
        }
    }
}

//**
//* Create a column out of any element.
//* @param {num} $grid-cols Number of columns the element should span (default is max)
//* @param {num} $offset Number of columns the element should be offset by
//* @param {num} $push Push the element by x number of columns
//* @param {num} $pull Pull the element by x number of columns
//* @param {bool} $centered Center the column in the row (there should only be one)
//* @param {bool} $half-gutter Use only a half gutter on this specific column
//*/
@mixin grid-col($columns: $grid-cols, $offset: 0, $push: 0, $pull: 0, $centered: false, $half-gutter: false) {
    display: block;
    position: relative;
    // push/pull
    @if $push > 0 { left: gridCalc($push); }
    @else if $pull > 0 { right: gridCalc($pull); }
    // centered
    @if $centered { float: none; margin: 0 auto; }
    @else { float: left; }
    // offset
    @if $offset > 0 { margin-left: gridCalc($offset); }
    width: gridCalc($columns);
    // half gutter
    @if $half-gutter { padding: 0 $grid-quarter-gutter; }
    @else { padding: 0 $grid-half-gutter; }
    // ensure box-sizing
    @if $grid-set-border-box {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
        -ms-box-sizing: border-box;
            box-sizing: border-box;
    }

    @if $columns < $grid-cols {  // assume this was included in a class
    @media only screen and (max-width: $grid-breakpoint) {
        float: none;
        width: 100%;
        @if $offset > 0 { margin-left: 0; }
        @if $push > 0 { left: auto; }
        @if $pull > 0 { right: auto; }
    }
    }
}

//**
//* Create column widths, offset, push, and pull classes within a given context.
//* @param {num} $num-cols The number of columns to build classes to
//* @param {string} $prepend A name to prepend to each grid class (a '-' separates this from the class name)
//*/
@mixin grid-classes($num-cols: $grid-cols, $prepend: false) {
    @if $prepend { $prepend: $prepend + "-"; }
    @else { $prepend: ""; }

    // col widths
    @for $i from 1 through $num-cols {
        .#{$prepend}#{convertNumberToWord($i)} {
            width: gridCalc($i, $num-cols);
        }
    }

    // offsets, pushes, pulls
    @for $i from 1 through $num-cols - 1 {
        $prec: gridCalc($i, $num-cols);
        .#{$prepend}offset-#{$i} {
            margin-left: $prec;
        }
        .#{$prepend}push-#{$i} {
            left: $prec;
        }
        .#{$prepend}pull-#{$i} {
            right: $prec;
        }
    }
}

//**
//* Add mobile grid to column.
//* @param {num} $mobile-cols Number of columns to span on mobiles (default is max)
//*/
@mixin grid-mobile($mobile-cols: $grid-mobile-cols) {
    @media only screen and (max-width: $grid-breakpoint) {
        float: left;
        width: gridCalc($mobile-cols, $grid-mobile-cols);
    }
}

/////////////////
// Grid Styles //
/////////////////

.#{$grid-container-class} {
    @include grid-container;
}

.#{$grid-row-class} {
    @include grid-row;

    &.half-gutter {
        .#{$grid-col-class} {
            padding: 0 ($grid-quarter-gutter);
        }
    }

    &.collapsed {
        margin: 0;

        .#{$grid-col-class} {
            padding: 0;
        }
    }
}

.#{$grid-col-class} {
    @include grid-col;

    &.centered {
        float: none;
        margin: 0 auto;
    }
}

// column classes
@include grid-classes;

.#{$grid-mobile-class}-show {
    display: none !important;
}

// mobile breakpoint
@media only screen and (max-width: $grid-breakpoint) {
    .#{$grid-col-class} {
        float: none;
        clear: both;
        width: 100%;
    }

    // offset
    [class*="offset"] {
        margin-left: 0;
    }

    // push
    [class*="push"] {
        left: auto;
    }

    // pull
    [class*="pull"] {
        right: auto;
    }

    // mobile classes
    .#{$grid-mobile-class}-show {
        display: inherit !important;
    }

    .#{$grid-mobile-class}-hide {
        display: none !important;
    }

    @for $i from 1 through $grid-mobile-cols {
        .#{$grid-mobile-class}-#{convertNumberToWord($i)} {
            float: left;
            clear: none;
            width: gridCalc($i, $grid-mobile-cols);
        }
    }
}